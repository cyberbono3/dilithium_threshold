use super::poly::{N, Q};

// Roots of unity in order needed by forward ntt
const ZETAS: [i32; N] = [
    0, 25847, -2608894, -518909, 237124, -777960, -876248, 466468, 1826347,
    2353451, -359251, -2091905, 3119733, -2884855, 3111497, 2680103, 2725464,
    1024112, -1079900, 3585928, -549488, -1119584, 2619752, -2108549, -2118186,
    -3859737, -1399561, -3277672, 1757237, -19422, 4010497, 280005, 2706023,
    95776, 3077325, 3530437, -1661693, -3592148, -2537516, 3915439, -3861115,
    -3043716, 3574422, -2867647, 3539968, -300467, 2348700, -539299, -1699267,
    -1643818, 3505694, -3821735, 3507263, -2140649, -1600420, 3699596, 811944,
    531354, 954230, 3881043, 3900724, -2556880, 2071892, -2797779, -3930395,
    -1528703, -3677745, -3041255, -1452451, 3475950, 2176455, -1585221,
    -1257611, 1939314, -4083598, -1000202, -3190144, -3157330, -3632928,
    126922, 3412210, -983419, 2147896, 2715295, -2967645, -3693493, -411027,
    -2477047, -671102, -1228525, -22981, -1308169, -381987, 1349076, 1852771,
    -1430430, -3343383, 264944, 508951, 3097992, 44288, -1100098, 904516,
    3958618, -3724342, -8578, 1653064, -3249728, 2389356, -210977, 759969,
    -1316856, 189548, -3553272, 3159746, -1851402, -2409325, -177440, 1315589,
    1341330, 1285669, -1584928, -812732, -1439742, -3019102, -3881060,
    -3628969, 3839961, 2091667, 3407706, 2316500, 3817976, -3342478, 2244091,
    -2446433, -3562462, 266997, 2434439, -1235728, 3513181, -3520352, -3759364,
    -1197226, -3193378, 900702, 1859098, 909542, 819034, 495491, -1613174,
    -43260, -522500, -655327, -3122442, 2031748, 3207046, -3556995, -525098,
    -768622, -3595838, 342297, 286988, -2437823, 4108315, 3437287, -3342277,
    1735879, 203044, 2842341, 2691481, -2590150, 1265009, 4055324, 1247620,
    2486353, 1595974, -3767016, 1250494, 2635921, -3548272, -2994039, 1869119,
    1903435, -1050970, -1333058, 1237275, -3318210, -1430225, -451100, 1312455,
    3306115, -1962642, -1279661, 1917081, -2546312, -1374803, 1500165, 777191,
    2235880, 3406031, -542412, -2831860, -1671176, -1846953, -2584293,
    -3724270, 594136, -3776993, -2013608, 2432395, 2454455, -164721, 1957272,
    3369112, 185531, -1207385, -3183426, 162844, 1616392, 3014001, 810149,
    1652634, -3694233, -1799107, -3038916, 3523897, 3866901, 269760, 2213111,
    -975884, 1717735, 472078, -426683, 1723600, -1803090, 1910376, -1667432,
    -1104333, -260646, -3833893, -2939036, -2235985, -420899, -2286327, 183443,
    -976891, 1612842, -3545687, -554416, 3919660, -48306, -1362209, 3937738,
    1400424, -846154, 1976782,
];

// 32 bit  airthmetic
const QINV: i32 = 58728449;

pub fn montgomery_reduce(a: i64) -> i32 {
    let mut t = (a as i32).wrapping_mul(QINV) as i64;
    t = (a - t * Q as i64) >> 32;
    t as i32
}

/// Forward NTT, in-place.
pub fn ntt(a: &mut [i32]) {
    let mut j;
    let mut k = 0usize;
    let mut len = 128;
    let (mut t, mut zeta);

    while len > 0 {
        let mut start = 0;
        while start < N {
            k += 1;
            zeta = ZETAS[k] as i64;
            j = start;
            while j < (start + len) {
                t = montgomery_reduce(zeta * a[j + len] as i64);
                a[j + len] = a[j] - t;
                a[j] += t;
                j += 1;
            }
            start = j + len;
        }
        len >>= 1;
    }
}

/// Inverse NTT in-place
/// ## Perform INTT on slices of i32 elements
///
/// # Example
///
/// ```
/// use math::ntt::{ntt, intt};
/// let original_values: [i32; 256] = [0, 1, 1, 2, 3, 5, 8, 13];
/// let mut transformed_values = original_values.clone();
/// ntt(&mut transformed_values);
/// intt(&mut transformed_values);
/// assert_eq!(original_values, transformed_values);
/// ```
///
pub fn intt(a: &mut [i32]) {
    let mut j;
    let mut k = 256usize;
    let mut len = 1;
    let (mut t, mut zeta);
    const F: i64 = 41978; // mont^2/256

    while len < N {
        let mut start = 0;
        while start < 256 {
            k -= 1;
            zeta = -ZETAS[k] as i64;
            j = start;
            while j < (start + len) {
                t = a[j];
                a[j] = t + a[j + len];
                a[j + len] = t - a[j + len];
                a[j + len] = montgomery_reduce(zeta * a[j + len] as i64);
                j += 1
            }
            start = j + len;
        }
        len <<= 1;
    }

    for j in 0..N {
        a[j] = montgomery_reduce(F * a[j] as i64);
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_montgomery_reduce() {
        // Test Montgomery reduction properties
        let a = 12345i64;
        let b = 67890i64;

        // Test that montgomery_reduce is deterministic
        let r1 = montgomery_reduce(a);
        let r2 = montgomery_reduce(a);
        assert_eq!(r1, r2, "Montgomery reduce should be deterministic");

        // Test bounds: result should be in [-Q, Q]
        for i in 0..100 {
            let x = (i * 12345) as i64;
            let r = montgomery_reduce(x);
            assert!(r.abs() <= Q, "Montgomery reduce out of bounds: {}", r);
        }
    }

    #[test]
    fn ntt_test() {
        let mut input = [
            2, -1, 3, 0, -2, 1, -3, 2, 4, -4, 1, -1, 0, 2, -2, 3, -3, 4, -4, 3,
            -1, 2, -2, 1, 0, -3, 3, -4, 4, -1, 1, -2, 2, 0, -1, 3, -3, 4, -4,
            2, -2, 1, -1, 0, 3, -3, 4, -4, 1, -1, 2, -2, 3, -3, 0, 4, -4, 1,
            -1, 2, -2, 3, -3, 0, 4, -4, 3, -3, 2, -2, 1, -1, 0, 4, -4, 3, -3,
            2, -2, 1, -1, 0, 2, -2, 4, -4, 1, -1, 3, -3, 0, 2, -2, 4, -4, 1,
            -1, 3, -3, 0, 1, -1, 2, -2, 3, -3, 4, -4, 0, 1, -1, 2, -2, 3, -3,
            4, -4, 0, 3, -3, 1, -1, 4, -4, 2, -2, 0, 3, -3, 1, -1, 4, -4, 2,
            -2, 0, 4, -4, 3, -3, 2, -2, 1, -1, 0, 4, -4, 3, -3, 2, -2, 1, -1,
            0, 2, -2, 4, -4, 1, -1, 3, -3, 0, 2, -2, 4, -4, 1, -1, 3, -3, 0, 1,
            -1, 2, -2, 3, -3, 4, -4, 0, 1, -1, 2, -2, 3, -3, 4, -4, 0, 3, -3,
            1, -1, 4, -4, 2, -2, 0, 3, -3, 1, -1, 4, -4, 2, -2, 0, 2, -2, 3,
            -3, 1, -1, 4, -4, 0, 2, -2, 3, -3, 1, -1, 4, -4, 0, 4, -4, 2, -2,
            3, -3, 1, -1, 0, 4, -4, 2, -2, 3, -3, 1, -1, 0, 1, -1, 4, -4, 3,
            -3, 2, -2, 0, 1, -1, 4,
        ];

        let output = [
            10782399, 6972977, 4171496, -788460, 245414, 6713026, 3819187,
            -2009247, -1447026, 4893050, 5359721, 1367415, 8500740, 5150544,
            1581543, 2230997, -4189791, 3331945, 1561680, 7716474, 8504412,
            14945592, 8190563, 1616045, 6850260, 8340148, 5497338, 11592894,
            8754679, 16489863, 9667701, 3077397, -1670945, 6182415, -7180628,
            972754, -11192480, -4296566, 3635811, -3824281, 7811213, 4837167,
            984835, 7315337, -943211, 6747199, 13211590, 8541550, 12656228,
            4277618, -807016, 2361810, 10670478, 10621114, 12597299, 7399533,
            2233805, 2393855, 5430558, 1424778, -2431566, 2516744, 1220719,
            8370411, 1486869, 2097715, 3141133, -1240277, 4357728, 2599392,
            3619928, 10646416, 1168240, -1349082, -6334424, -10105942,
            -1985028, 220390, 2603083, -4907805, -13385757, -11485023,
            -2477935, -7791613, -15350625, -12708753, -9448554, -7747924,
            -12342086, -8795108, -6209159, -4310911, 5698648, 3121236,
            -6124529, -1280243, 14097194, 13806412, 11882022, 4264268, 1562232,
            3257490, 5161257, 1709845, 5446318, 115312, 8210026, 3867384,
            1893028, 624828, 4329674, 7169958, 7055343, 282995, -1008227,
            -5008895, 8672580, 2008946, 3658001, -4649591, 2732878, 241994,
            10586093, 9000707, 336593, 1361657, -1262132, 695218, -1652489,
            -5250497, 3950415, 2759131, 6724161, -1028457, -3819301, 537893,
            5455438, -167374, 12641755, 8855073, 8377560, 3934266, 4373134,
            4145244, 2861257, -2331617, -2035715, 5297619, 519102, 3071028,
            124476, -928814, 8653065, 1299895, 3844515, 1325989, 5004967,
            6363211, 3965985, 8505149, 5336845, -2753639, 1242505, 6080833,
            1381546, -3214070, 8775783, 1519813, -851329, -5545001, -5974240,
            -12469606, -5917972, -4116264, 4241284, -777544, 1278616, -4766750,
            -10852796, -7818354, 2392382, -1414692, -6299014, -5982184,
            -954627, -8979509, -5800852, -12163392, -6972394, -11179220,
            -14056930, -7032492, 2913516, -3118586, -1761325, -5464209,
            -8791231, -6092535, -15074210, -7168724, -7923673, -12706605,
            -14971196, -16432506, -6422579, -9493767, -4492908, -6312198,
            -7554101, -6218059, -4500687, -9556377, -2866033, -4180179,
            -553788, 1722176, -4018023, -3540815, -1644296, 4515394, 4681814,
            2427250, 2513703, 6892213, 4067262, 3836100, -2062179, 1048841,
            -3904268, -4056658, -3852752, -10289210, -1841853, -9247821,
            3300849, -1479587, -14408199, -7443127, -7127467, -8977979, 709302,
            4763008, 2259536, 2346442, -2481427, -1592081, -6287336, -3619740,
            -8014179, -4274469, -5456090, -6146374, -6662096, -8104178,
            -17432462, -13150064,
        ];

        super::ntt(&mut input);
        assert_eq!(input, output);
    }
}
